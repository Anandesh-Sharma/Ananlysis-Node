import json
import os
import warnings
import requests
from HardCode.scripts.testing.execute.data_fetch import get_sms, get_cibil
from HardCode.scripts.testing.user_ids import *

warnings.filterwarnings('ignore')
from tqdm import tqdm
import pandas as pd


def generate_access_token():
    # ==> this function is used to generate the access token in case if it expires

    url = 'http://localhost:5000/api/token/'

    credentials = {'username': 'root', 'password': 'root'}

    res = requests.post(url=url, data=credentials, verify=False)
    res = res.json()
    return res['access']


def execute_bl0(**kwargs):
    user_id = kwargs.get('user_id')
    cibil_score = kwargs.get('cibil_score')
    # cibil_xml = kwargs.get('cibil_file')


    if os.path.exists(os.path.join('..\input_data', 'cibil_data_' + str(user_id) + '.xml')):
        cibil_xml = open(os.path.join('..\input_data', 'cibil_data_' + str(user_id) + '.xml'))
    else:
        cibil_xml = None
    sms_json = open(os.path.join('..\input_data', 'sms_data_' + str(user_id) + '.json'), 'rb')

    new_user = 1
    all_loan_amount = [1000, 2000, 3000, 4000]
    current_loan_amount = 0

    url = 'http://localhost:5000/hard_code/bl0/'
    token = generate_access_token()
    Auth = 'Bearer ' + str(token)
    payload = {
        'user_id': user_id,
        'new_user': new_user,
        'cibil_score': cibil_score,
        'current_loan_amount': current_loan_amount,
        'all_loan_amount': all_loan_amount,

    }
    files = [('sms_json', sms_json), ('cibil_xml', cibil_xml)]
    result = requests.post(url=url, data=payload, files=files, headers={'Authorization': Auth})
    result = result.json()
    df = {"cust_id": user_id,"score": [result['Model_0']['score']],
           "secured": [result['Model_0']['parameters']['deduction_parameters']['secured_unsecured_val']['secured_unsecured_loans_count']['secured']],
          "unsecured": [result['Model_0']['parameters']['deduction_parameters']['secured_unsecured_val']['secured_unsecured_loans_count']['unsecured_count']],

             "age_of_oldest_trade":  [result['Model_0']['parameters']['deduction_parameters']['age_of_oldest_trade_val']['age_of_oldest_trade']],
            "active_count":  [result['Model_0']['parameters']['deduction_parameters']['active_close_val']['active_count']],
          "close_count":[result['Model_0']['parameters']['deduction_parameters']['active_close_val']['closed_count']],
            "loan_app_count_percentage": [result['Model_0']['parameters']['deduction_parameters']['loan_app_count_val']['loan_app_count']],
             'verification_similarity': [result['Model_0']['parameters']['deduction_parameters']['reference_val']['reference']['result']['similarity_score']],
          'relative_verification': [result['Model_0']['parameters']['deduction_parameters']['reference_val']['relatives']['length']],
             "0-3_days":  [result['Model_0']['parameters']['deduction_parameters']['loan_val']['due_days']['0-3_days']],
          "3-7_days": [result['Model_0']['parameters']['deduction_parameters']['loan_val']['due_days']['3-7_days']],
          "7-12_days": [result['Model_0']['parameters']['deduction_parameters']['loan_val']['due_days']['7-12_days']],
          "12-15_days": [result['Model_0']['parameters']['deduction_parameters']['loan_val']['due_days']['12-15_days']],
          "more_than_15": [result['Model_0']['parameters']['deduction_parameters']['loan_val']['due_days']['more_than_15']],
          "max_loan_limit": [result['Model_0']['parameters']['deduction_parameters']['loan_val']['max_limit']],
          "ecs_count": [result['Model_0']['parameters']['deduction_parameters']['ecs_val']['ecs_bounce']],
          "chq_count": [result['Model_0']['parameters']['deduction_parameters']['ecs_val']['cheque_bounce']],
          "payment_rating":[result['Model_0']['parameters']['deduction_parameters']['payment_rating_val']['payment_rating']],
          "balance_on_loan_date": [result['Model_0']['parameters']['deduction_parameters']['available_balance_val']['available_balance']['balance_on_loan_date']],
          "last_month_bal": [result['Model_0']['parameters']['deduction_parameters']['available_balance_val']['available_balance']['last_month_bal']],
          "scnd_last_month_bal": [result['Model_0']['parameters']['deduction_parameters']['available_balance_val']['available_balance']['second_last_month_bal']],
          "third_last_month": [result['Model_0']['parameters']['deduction_parameters']['available_balance_val']['available_balance']['third_last_month_bal']],
          "no_of_accounts": [result['Model_0']['parameters']['deduction_parameters']['available_balance_val']['available_balance']['no_of_accounts']],
          "mean_avbl_bal": [result['Model_0']['parameters']['deduction_parameters']['available_balance_val']['mean_available_balance']],
          "age": [result['Model_0']['parameters']['additional_parameters']['age']],
          "creditcard_no": [result['Model_0']['parameters']['additional_parameters']['no_of_ccard']],
          "creditcard_max_limit": [result['Model_0']['parameters']['additional_parameters']['max_cc_limit']],
          "salary": [result['Model_0']['parameters']['additional_parameters']['salary_val']['salary']],
          "keyword": [result['Model_0']['parameters']['additional_parameters']['salary_val']['keyword']],
          "name_msg_count": [result['Model_0']['parameters']['additional_parameters']['name_msg_count']],
          "overdue_ratio": [result['Model_0']['parameters']['deduction_parameters']['loan_val']['overdue_ratio']],
          "overdue_msg_count": [result['Model_0']['parameters']['additional_parameters']['overdue_msg_count']],
          "overdue_msg_ratio": [result['Model_0']['parameters']['additional_parameters']['overdue_msg_ratio']],
          "legal_msg_count": [result['Model_0']['parameters']['additional_parameters']['legal_msg_count']],
          "legal_msg_ratio": [result['Model_0']['parameters']['additional_parameters']['legal_msg_ratio']],
          "total_loans": [result['Model_0']['parameters']['deduction_parameters']['due_days_interval_val']['total_loans']],
          "same_app_count": [result['Model_0']['parameters']['deduction_parameters']['due_days_interval_val']['same_app_count']],
          "different_app_count": [result['Model_0']['parameters']['deduction_parameters']['due_days_interval_val']['different_app_count']],
          "loan_app_list":[result['Model_0']['parameters']['deduction_parameters']['loan_val']['loan_app_list']],
            "rejection_reason":[result['Model_0']['rejection_reasons']]
          }

    data = pd.DataFrame.from_dict(df)
    # output = data.append(df, ignore_index=True)
    data.to_csv('nondef_resultsss.csv', mode='a', header=False)


    # if not os.path.exists('../result'):
    #     os.mkdir('result')

    with open(str(user_id) + '.json', 'w', encoding='utf-8') as fp:
        json.dump(result, fp, ensure_ascii=False, indent=4)


def testing(user_id):
    if not os.path.exists(os.path.join('..\input_data', 'sms_data_' + str(user_id) + '.json')):
        get_sms(user_id=user_id)

    if not os.path.exists(os.path.join('..\input_data', 'cibil_data_' + str(user_id) + '.xml')):
        get_cibil(user_id=user_id)

    try:
        if str(user_id).isdigit():
            if os.path.exists(os.path.join('..\input_data', 'sms_data_' + str(user_id) + '.json')):

                # ==> cibil score is passed 807 by default

                execute_bl0(user_id=int(user_id), cibil_score=807)

                print(f"result generated successfully : {user_id}")
            else:
                msg = 'sms json does not exists'
                raise BaseException(msg)
        else:
            msg = 'user id must contain only numbers'
            raise BaseException(msg)

    except BaseException as e:
        print(f"the following error occurred : {e}")

#
# user_id = input('enter user id: ')
# testing(user_id=user_id)

l = [138111,
 68885,
 15908,
 135283,
 118417,
 52209,
 111813,
 51159,
 107379,
 23933,
 15908,
 118617,
 116954,
 99302,
 116954,
 116502,
 118617,
 48455,
 135393,
 139777,
 8201,
 23663,
 121848,
 42505,
 19003,
 5147,
 128488,
 21999,
 138477,
 10374,
 44344,
 133523,
 135393,
 121848,
 115713,
 184629,
 177077,
 128488,
 74330,
 117023,
 118474,
 118529,
 128927,
 130298,
 130362,
 132032,
 133554,
 133523,
 133209,
 138774,
 138258,
 138752,
 138620,
 138539,
 140577,
 138245,
 138459,
 140805,
 140031,
 136979,
 136863,
 138563,
 140692,
 139490,
 138391,
 138550,
 142059,
 139787,
 11735,
 143750,
 145251,
 145330,
 146544,
 142362,
 146025,
 145866,
 146615,
 146035,
 148068,
 148353,
 148521,
 149906,
 149670,
 150290,
 87224,
 153884,
 152203,
 153880,
 152776,
 153511,
 154059,
 155316,
 152316,
 153303,
 156322,
 158462,
 159120,
 159277,
 159355,
 159800,
 159771,
 159539,
 160910,
 160812,
 164125,
 164388,
 164383,
 164490,
 164366,
 166503,
 199638,
 176119,
 163062,
 176749,
 163242,
 170701,
 187900,
 183342,
 180662,
 177398,
 178354,
 188842,
 190094,
 163558,
 163287,
 169485,
 167120,
 187825,
 184755,
 183635,
 74927,
 68959,
 174166,
 186776,
 189380,
 50850,
 168416,
 193077,
 35828,
 187465,
 183784,
 183665,
 178446,
 179023,
 180689,
 180683,
 180770,
 186002,
 187941,
 188255,
 188087,
 190732,
 80927,
 176549,
 169457,
 162952,
 209104,
 208946,
 70133,
 210818,
 210313,
 209664,
 209609,
 211910,
 211593,
 11710,
 210313,
 173968,
 213093,
 215588,
 213121,
 213118,
 212745,
 216943,
 216666,
 216501,
 216481,
 213813,
 213944,
 214271,
 214327,
 214374,
 214444,
 215561,
 215377,
 214872,
 214911,
 219321,
 219284,
 214803,
 101110,
 218711,
 221219,
 221825,
 219322,
 222943,
 222847,
 225001,
 217988,
 225315,
 225316,
 223109,
 211578,
 212678,
 226185,
 227962,
 219804,
 118417,
 225792,
 223483,
 214524,
 229470,
 230249,
 230493,
 230931,
 213211,
 228986,
 230366,
 222174,
 228261,
 229960,
 229448,
 208704,
 230344,
 231721,
 228132,
 230384,
 231398,
 231351,
 231775,
 230868,
 232026,
 232299,
 232179,
 233528,
 232820,
 233059,
 232565,
 232586,
 232658,
 227295,
 234530,
 234478,
 232411,
 232410,
 233604,
 236618,
 233751,
 234192,
 234303,
 234700,
 236740,
 238692,
 235920,
 236280,
 244426,
 235912,
 242241,
 240608,
 243438,
 193989,
 241370,
 241479,
 236587,
 245655,
 241978,
 244825,
 8595,
 17864,
 19157,
 19770,
 20701,
 24687,
 27878,
 28445,
 29651,
 33489,
 41996,
 44062,
 50404,
 80428,
 81464,
 86066,
 86697,
 104530,
 106278,
 113353,
 113594,
 125108,
 126942,
 127676,
 127909,
 144745,
 146475,
 187407,
 191625,
 199505,
 208221,
 210948,
 215041,
 223754,
 229824,
 231347,
 233315,
 233561,
 234808,
 235459,
 235497,
 236499,
 236907,
 238826,
 242528,
 242953,
 242966,
 243182,
 243864,
 243883,
 245040,
 245506,
 245700,
 246082,
 246237,
 246245,
 246517,
 246807,
 246833,
 246908,
 247257,
 247434,
 248291,
 248574,
 248628,
 248758,
 248855,
 248891,
 249013,
 249065,
 249147,
 249184,
 249293,
 249422,
 249757,
 249802,
 249840,
 249873,
 249992,
 250167,
 251193,
 251304,
 251505,
 251564,
 251686,
 251722,
 252285,
 252306,
 252399,
 252539,
 252609,
 252635,
 252809,
 252919,
 252978,
 253134,
 253421,
 253711,
 253758,
 253954,
 254020,
 254261,
 254340,
 254435,
 254519,
 254577,
 254807,
 254951,
 255603,
 255609,
 255699,
 255937,
 256096,
 256629,
 256681,
 256948,
 257229,
 257440,
 257488,
 257591,
 257784,
 257818,
 257927,
 258376,
 258473,
 258477,
 258552,
 258968,
 259140,
 259448,
 259554,
 259628,
 259688,
 259723,
 260071,
 260384,
 260391,
 260560,
 260568,
 260569,
 260570,
 260643,
 260657,
 260763,
 260865,
 260890,
 260976,
 261007,
 261066,
 261130,
 261174,
 261234,
 261286,
 261325,
 261381,
 261385,
 261486,
 261690,
 261797,
 261839,
 262004,
 262044,
 262090,
 262093,
 262094,
 262095,
 262097,
 262144,
 262145,
 262146,
 262192,
 262200,
 262239,
 262378,
 262403,
 262434,
 262456,
 262608,
 262714,
 262779,
 262959,
 263038,
 263125,
 263147,
 263155,
 263159,
 263481,
 264023,
 264043,
 264053,
 264113,
 264145,
 264448,
 264512,
 264561,
 264567,
 264632,
 264723,
 264807,
 264966,
 265097,
 265121,
 265137,
 265275,
 265284,
 265393,
 265686,
 265926,
 265975,
 266196,
 266211,
 266218,
 266398,
 266415,
 266419,
 266594,
 266602,
 266699,
 266812,
 266872,
 266883,
 266933,
 267044,
 267092,
 267162,
 267214,
 267274,
 267456,
 267479,
 267562,
 267634,
 267658,
 267713,
 267862,
 267892,
 267972,
 267989,
 268249,
 268397,
 268465,
 268610,
 268834,
 269074,
 269145,
 269155,
 269354,
 269708,
 269790,
 269925,
 269987,
 270037,
 270083,
 270135,
 270142,
 270283,
 270644,
 271010,
 271178,
 271348,
 271432,
 271594,
 271696,
 271762,
 271786,
 271788,
 271789,
 271824,
 271846,
 271889,
 271993,
 271997,
 272133,
 272263,
 272283,
 272284,
 272372,
 272396,
 272609,
 272678,
 272692,
 272768,
 272883,
 272929,
 273156,
 273279,
 273359,
 273678,
 273812,
 273834,
 273862,
 273951,
 274080,
 274361,
 274455,
 274515,
 274559,
 274607,
 274671,
 274678,
 274763,
 275145,
 275174,
 275295,
 275385,
 275389,
 275447,
 275452,
 275454,
 275481,
 275708,
 275756,
 275971,
 275974,
 276122,
 276278,
 276547,
 276640,
 276758,
 276914,
 277160,
 277196,
 277370,
 277413,
 277475,
 277606,
 277857,
 278188,
 278472,
 278648,
 278686,
 278768,
 278839,
 278910,
 278933,
 279079,
 279159,
 279751,
 279945,
 280003,
 280433,
 280735,
 280995,
 281031,
 281215,
 281342,
 284959,
 284991,
 285290,
 285882,
 286339,
 287100,
 287436,
 287914,
 288164,
 289061,
 289466,
 290093,
 292628,
 293381,
 293840,
 293906,
 295375,
 295534,
 296336,
 296573,
 298455,
 298806,
 300848,
 301384,
 312178]
l.sort(reverse=True)
print(len(l))
print(l)

# from concurrent.futures import ThreadPoolExecutor

# with ThreadPoolExecutor() as exc:
#     exc.map(testing,(i for i in l))


for i in tqdm(l[:300]):
    testing(i)
